{"version":3,"sources":["Components/Header.js","Components/Button.js","Components/Display.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","size","margin-top","isClear","val","Button","props","onClick","handleClick","children","isNaN","Display","display","App","state","updateDisplay","bind","clearDisplay","value","ans","math","this","setState","Container","fluid","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2XAgBeA,MAXf,WACE,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAcA,UAAU,eAAeC,KAAK,OAAOC,aAAW,SAC9D,wBAAIF,UAAU,cAAd,wB,MCHR,SAASG,EAAQC,GACf,MAAc,SAAPA,EAiBMC,MAdf,SAAgBC,GACd,OACE,yBACEC,QAAS,kBAAMD,EAAME,YAAYF,EAAMG,WACvCT,UAAS,kBAZKI,EAYkBE,EAAMG,SAXlCC,MAAMN,IAAe,KAAPA,GAAqB,KAAPA,EAWyB,WAAP,MAAzC,YACPD,EAAQG,EAAMG,UAAY,QAAU,OAIrCH,EAAMG,UAjBb,IAAoBL,G,MCILO,MAJf,SAAiBL,GACf,OAAO,yBAAKN,UAAU,WAAWM,EAAMM,UCmF1BC,E,kDAxEb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXF,QAAS,IAEX,EAAKG,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBANR,E,0DASAE,GACZ,IAAIC,EAEFA,EADW,KAATD,EACIE,IAAcC,KAAKP,MAAMF,SAEzBS,KAAKP,MAAMF,QAAUM,EAE7BG,KAAKC,SAAS,CACZV,QAASO,M,qCAKXE,KAAKC,SAAS,CACZV,QAAS,O,+BAKX,OACE,kBAACW,EAAA,EAAD,CAAWC,OAAK,GACd,yBAAKxB,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAASY,QAASS,KAAKP,MAAMF,WAE/B,yBAAKZ,UAAU,OACb,kBAAC,EAAD,CAAQQ,YAAaa,KAAKN,eAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaa,KAAKN,eAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaa,KAAKN,eAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaa,KAAKN,eAA1B,MAEF,yBAAKf,UAAU,OACb,kBAAC,EAAD,CAAQQ,YAAaa,KAAKN,eAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaa,KAAKN,eAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaa,KAAKN,eAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaa,KAAKN,eAA1B,MAEF,yBAAKf,UAAU,OACb,kBAAC,EAAD,CAAQQ,YAAaa,KAAKN,eAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaa,KAAKN,eAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaa,KAAKN,eAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaa,KAAKN,eAA1B,MAEF,yBAAKf,UAAU,OACb,kBAAC,EAAD,CAAQQ,YAAaa,KAAKN,eAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaa,KAAKN,eAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaa,KAAKN,eAA1B,KACA,kBAAC,EAAD,CAAQP,YAAaa,KAAKN,eAA1B,MAEF,yBAAKf,UAAU,OACb,kBAAC,EAAD,CAAQQ,YAAaa,KAAKJ,cAA1B,kB,GA/DEQ,IAAMC,WCFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ab738462.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { FaCalculator } from \"react-icons/fa\";\r\nimport \"./headerStyles.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"title\">\r\n      <div className=\"hero\">\r\n        <FaCalculator className=\"icon-aligned\" size=\"2rem\" margin-top=\"10px\" />\r\n        <h1 className=\"title-text\">Simple Calculator</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./buttonStyles.css\";\r\n\r\nfunction isOperator(val) {\r\n  return !isNaN(val) || val == \".\" || val == \"=\";\r\n}\r\n\r\nfunction isClear(val) {\r\n  return val == \"CLEAR\";\r\n}\r\n\r\nfunction Button(props) {\r\n  return (\r\n    <div\r\n      onClick={() => props.handleClick(props.children)}\r\n      className={`button ${isOperator(props.children) ? null : \"operator\"} ${\r\n        isClear(props.children) ? \"clear\" : null\r\n      }`}\r\n    >\r\n      {/* <button>{props.children}</button> */}\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./displayStyles.css\";\r\n\r\nfunction Display(props) {\r\n  return <div className=\"display\">{props.display}</div>;\r\n}\r\n\r\nexport default Display;\r\n","import React from \"react\";\nimport * as math from \"mathjs\";\nimport Container from \"react-bootstrap/Container\";\nimport \"./App.css\";\n\n// COMPONENTS MADE BY ME\nimport Header from \"./Components/Header\";\nimport Button from \"./Components/Button\";\nimport Display from \"./Components/Display\";\n\n// REACT ICONS\nimport { IconContext } from \"react-icons\";\nimport { FaCalculator } from \"react-icons/fa\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      display: \"\",\n    };\n    this.updateDisplay = this.updateDisplay.bind(this);\n    this.clearDisplay = this.clearDisplay.bind(this);\n  }\n\n  updateDisplay(value) {\n    var ans;\n    if (value == \"=\") {\n      ans = math.evaluate(this.state.display);\n    } else {\n      ans = this.state.display + value;\n    }\n    this.setState({\n      display: ans,\n    });\n  }\n\n  clearDisplay() {\n    this.setState({\n      display: \"\",\n    });\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <div className=\"App\">\n          <Header />\n          <div className=\"main\">\n            <div className=\"box\">\n              <div className=\"row\">\n                <Display display={this.state.display} />\n              </div>\n              <div className=\"row\">\n                <Button handleClick={this.updateDisplay}>7</Button>\n                <Button handleClick={this.updateDisplay}>8</Button>\n                <Button handleClick={this.updateDisplay}>9</Button>\n                <Button handleClick={this.updateDisplay}>/</Button>\n              </div>\n              <div className=\"row\">\n                <Button handleClick={this.updateDisplay}>4</Button>\n                <Button handleClick={this.updateDisplay}>5</Button>\n                <Button handleClick={this.updateDisplay}>6</Button>\n                <Button handleClick={this.updateDisplay}>*</Button>\n              </div>\n              <div className=\"row\">\n                <Button handleClick={this.updateDisplay}>1</Button>\n                <Button handleClick={this.updateDisplay}>2</Button>\n                <Button handleClick={this.updateDisplay}>3</Button>\n                <Button handleClick={this.updateDisplay}>-</Button>\n              </div>\n              <div className=\"row\">\n                <Button handleClick={this.updateDisplay}>.</Button>\n                <Button handleClick={this.updateDisplay}>0</Button>\n                <Button handleClick={this.updateDisplay}>=</Button>\n                <Button handleClick={this.updateDisplay}>+</Button>\n              </div>\n              <div className=\"row\">\n                <Button handleClick={this.clearDisplay}>CLEAR</Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}